{"name": "test_tc_mb_cus_002[test_case0]", "status": "failed", "statusDetails": {"message": "Failed: Test Failed. Element 'Full Name' not found with Explicit wait. !!!", "trace": "browser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1e13f63f0910b21366af3e79fb97d696\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"1e13f63f0910b21366af3e79fb97d696\")>)\ntest_case = {'customer': [{'TC_CUS_001': {'_comment': 'Verify customer registration fails with invalid (Empty) Full Name and valid...'test@test.com', 'expected_result': 'Password must be at least 6 characters long.', 'fullname': 'Test Manager', ...}}]}\n\n    @pytest.mark.parametrize(\"test_case\",load_all_test_data(\"../data/data.json\"))\n    def test_tc_mb_cus_002(browser_config, test_case):\n        logging.info(\"TC_MB_CUS_004 Started..\")\n        logging.info(test_case[\"customer\"][3][\"TC_CUS_004\"][\"_comment\"])\n        driver, wait = browser_config\n    \n        # create object for CustomerPage class\n        customer_registration_page = CustomerRegistrationPage(driver,wait)\n    \n        # 2. Click on Open Your Account Button\n        try:\n            customer_registration_page.click_customer_open_account_button()\n            logging.info(\"Open Your Account Button Clicked successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Open Your Account Button' not found with Explicit wait.\")\n            pytest.fail(\"Element 'Open Your Account Button' not found with Explicit wait.\")\n    \n        time.sleep(3)\n    \n        # 3. Enter valid value of Full Name\n        try:\n>           customer_registration_page.enter_customer_fullname(test_case[\"customer\"][3][\"TC_CUS_004\"][\"fullname\"])\n\ntests/test_TC_MB_CUS_004.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/customer_registration_page.py:16: in enter_customer_fullname\n    customer_fullname = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, \"#customerNameReg\")))\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/expected_conditions.py:104: in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x701bbf535220>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...\\\\n#16 0x5f37a054e336 \\\\u003Cunknown>\\\\n#17 0x79a21fc9caa4 \\\\u003Cunknown>\\\\n#18 0x79a21fd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       #0 0x5f37a054f45a <unknown>\nE       #1 0x5f379fff4760 <unknown>\nE       #2 0x5f379ffdae8e <unknown>\nE       #3 0x5f37a0003309 <unknown>\nE       #4 0x5f37a00748cf <unknown>\nE       #5 0x5f37a0091cc5 <unknown>\nE       #6 0x5f37a006bc23 <unknown>\nE       #7 0x5f37a00384a5 <unknown>\nE       #8 0x5f37a0039111 <unknown>\nE       #9 0x5f37a0513f1b <unknown>\nE       #10 0x5f37a0517e19 <unknown>\nE       #11 0x5f37a04faac9 <unknown>\nE       #12 0x5f37a05189c8 <unknown>\nE       #13 0x5f37a04df34f <unknown>\nE       #14 0x5f37a053ca28 <unknown>\nE       #15 0x5f37a053cc06 <unknown>\nE       #16 0x5f37a054e336 <unknown>\nE       #17 0x79a21fc9caa4 <unknown>\nE       #18 0x79a21fd29c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException\n\nDuring handling of the above exception, another exception occurred:\n\nbrowser_config = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"1e13f63f0910b21366af3e79fb97d696\")>, <selenium.webdriver.support.wait.WebDriverWait (session=\"1e13f63f0910b21366af3e79fb97d696\")>)\ntest_case = {'customer': [{'TC_CUS_001': {'_comment': 'Verify customer registration fails with invalid (Empty) Full Name and valid...'test@test.com', 'expected_result': 'Password must be at least 6 characters long.', 'fullname': 'Test Manager', ...}}]}\n\n    @pytest.mark.parametrize(\"test_case\",load_all_test_data(\"../data/data.json\"))\n    def test_tc_mb_cus_002(browser_config, test_case):\n        logging.info(\"TC_MB_CUS_004 Started..\")\n        logging.info(test_case[\"customer\"][3][\"TC_CUS_004\"][\"_comment\"])\n        driver, wait = browser_config\n    \n        # create object for CustomerPage class\n        customer_registration_page = CustomerRegistrationPage(driver,wait)\n    \n        # 2. Click on Open Your Account Button\n        try:\n            customer_registration_page.click_customer_open_account_button()\n            logging.info(\"Open Your Account Button Clicked successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Open Your Account Button' not found with Explicit wait.\")\n            pytest.fail(\"Element 'Open Your Account Button' not found with Explicit wait.\")\n    \n        time.sleep(3)\n    \n        # 3. Enter valid value of Full Name\n        try:\n            customer_registration_page.enter_customer_fullname(test_case[\"customer\"][3][\"TC_CUS_004\"][\"fullname\"])\n            logging.info(\"Valid Full Name Enter successfully.\")\n        except Exception as e:\n            logging.error(\"Element 'Full Name' not found with Explicit wait.\")\n>           pytest.fail(\"Test Failed. Element 'Full Name' not found with Explicit wait. !!!\")\nE           Failed: Test Failed. Element 'Full Name' not found with Explicit wait. !!!\n\ntests/test_TC_MB_CUS_004.py:38: Failed"}, "attachments": [{"name": "log", "source": "de9a21a1-d91e-494d-b583-2bf752645122-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'customer': [{'TC_CUS_001': {'_comment': 'Verify customer registration fails with invalid (Empty) Full Name and valid Email Address, Password and Initial Deposit.', 'fullname': '', 'email': 'test@test.com', 'pass': '123456789', 'deposit_amount': '20000', 'expected_result': 'Please fill out this field.'}}, {'TC_CUS_002': {'_comment': 'Verify customer registration fails with invalid Email Address (Empty) and valid Full Name, Password and Initial Deposit.', 'fullname': 'Test Customer', 'email': '', 'pass': '123456789', 'deposit_amount': '20000', 'expected_result': 'Please fill out this field.'}}, {'TC_CUS_003': {'_comment': 'Verify customer registration fails with invalid Email Address (Wrong, without @) and valid Full Name, Password and Initial Deposit.', 'fullname': 'Test Customer', 'email': 'test', 'pass': '123456789', 'deposit_amount': '20000', 'expected_result': \"Please include an '@' in the email address. 'test' is missing an '@'.\"}}, {'TC_CUS_004': {'_comment': 'Verify customer registration fails with invalid Email Address (Wrong, without a part following @) and valid Full Name, Password and Initial Deposit.', 'fullname': 'Test Customer', 'email': 'test@', 'pass': '123456789', 'deposit_amount': '20000', 'expected_result': \"Please enter a part following '@'. 'test@' is incomplete.\"}}, {'TC_CUS_005': {'_comment': 'Verify customer registration fails with invalid Password (Empty) and valid Full Name, Email Address and Initial Deposit.', 'fullname': 'Test Customer', 'email': 'test@test.com', 'pass': '', 'deposit_amount': '20000', 'expected_result': 'Please fill out this field.'}}, {'TC_CUS_006': {'_comment': 'Verify customer registration fails with invalid Password (< 6 Char) and valid Full Name, Email Address and Initial Deposit.', 'fullname': 'Test Customer', 'email': 'test@test.com', 'pass': '12345', 'deposit_amount': '20000', 'expected_result': 'Password must be at least 6 characters long.'}}, {'TC_CUS_007': {'_comment': 'Verify customer registration fails with invalid Initial Deposit Amount (Empty) and valid Full Name, Email Address and Password.', 'fullname': 'Test Customer', 'email': 'test@test.com', 'pass': '123456', 'deposit_amount': '', 'expected_result': 'Please fill out this field.'}}, {'TC_CUS_008': {'_comment': 'Verify customer registration fails with invalid Initial Deposit Amount (< 20) and valid Full Name, Email Address and Password.', 'fullname': 'Test Customer', 'email': 'test@test.com', 'pass': '123456', 'deposit_amount': '19', 'expected_result': 'Please fill out this field.'}}], 'manager': [{'TC_MAN_001': {'_comment': 'Verify manager registration fails with invalid (Empty) Full Name and valid Email Address, Password.', 'fullname': '', 'email': 'test@test.com', 'pass': '123456789', 'expected_result': 'Please fill out this field.'}}, {'TC_MAN_002': {'_comment': 'Verify manager registration fails with invalid Email Address (Empty) and valid Full Name, Password.', 'fullname': 'Test Manager', 'email': '', 'pass': '123456789', 'expected_result': 'Please fill out this field.'}}, {'TC_MAN_003': {'_comment': 'Verify manager registration fails with invalid Email Address (Wrong, without @) and valid Full Name, Password.', 'fullname': 'Test Manager', 'email': 'test', 'pass': '123456789', 'expected_result': \"Please include an '@' in the email address. 'test' is missing an '@'.\"}}, {'TC_MAN_004': {'_comment': 'Verify manager registration fails with invalid Email Address (Wrong, without a part following @) and valid Full Name, Password.', 'fullname': 'Test Manager', 'email': 'test@', 'pass': '123456789', 'expected_result': \"Please enter a part following '@'. 'test@' is incomplete.\"}}, {'TC_MAN_005': {'_comment': 'Verify manager registration fails with invalid Password (< 6 Char) and valid Full Name, Email Address.', 'fullname': 'Test Manager', 'email': 'test@test.com', 'pass': '12345', 'expected_result': 'Password must be at least 6 characters long.'}}]}"}], "start": 1755324848610, "stop": 1755324851704, "uuid": "dd07a884-93ac-401a-a269-e94ee7695903", "historyId": "bbaa04f751733ec69a34526fabc366b6", "testCaseId": "edcc40cba9ce3609fb6f46a6f612782d", "fullName": "tests.test_TC_MB_CUS_004#test_tc_mb_cus_002", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_TC_MB_CUS_004"}, {"name": "host", "value": "sabina"}, {"name": "thread", "value": "10509-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_TC_MB_CUS_004"}], "titlePath": ["tests", "test_TC_MB_CUS_004.py"]}